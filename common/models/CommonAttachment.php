<?php

namespace common\models;

use backend\models\Attachment;
use common\enpii\components\NpItemDataSub;
use yii;
use yii\helpers\Json;
use yii\web\UploadedFile;

/**
 * @property $arrSize
 * @property $fileUpload
 * This is the model class for table "np_attachment".
 */
class CommonAttachment extends \common\models\base\BaseAttachment
{
    use NpItemDataSub;

    public $arrSize;

    /**
     * @var UploadedFile
     */
    public $fileUpload;

    public function __construct()
    {
        parent::__construct();
        $this->arrSize = [
//            'large' => ['width' => 1024, 'height' => 1024, 'crop' => false],
//            'medium' => ['width' => 480, 'height' => 480, 'crop' => false],
            'thumbnail' => ['width' => 300, 'height' => 300, 'crop' => true]
        ];
    }

    public function prepareFile($file, $path = null)
    {

        $fileLocation = Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $file;


        $pathParts = pathinfo($fileLocation);
        $sizeDetect = [];
        $imageSize = getimagesize($fileLocation);
        $sizeDetect[] = [
            'full' => [
                'width' => $imageSize[0],
                'height' => $imageSize[1]
            ]
        ];

        foreach ($this->arrSize as $key => $size) {
            $newFileName = $pathParts['filename'] . "-" . $size['width'] . "x" . $size['height'] . "." . $pathParts['extension'];
            $newFile = Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $newFileName;


            if ($imageSize[0] > $size['width'] && $imageSize[1] > $size['height']) {
                if (!copy($fileLocation, $newFile)) {
                    echo "failed to copy";
                } else {
                    chmod($newFile, 0777);
                }
                $image = Yii::$app->image->load($newFile);
                if ($size['crop']) {
                    if ($imageSize[0] > $imageSize[1]) {
                        $image->crop($imageSize[1], $imageSize[1]);
                        $image->resize($size['width'], $size['height']);
                    } else if ($imageSize[0] < $imageSize[1]) {
                        $image->crop($imageSize[0], $imageSize[0]);
                        $image->resize($size['width'], $size['height']);
                    } else {
                        $image->resize($size['width'], $size['height']);
                    }
                } else {
                    $image->resize($size['width'], $size['height']);
                }
                $image->save();
                $imageSize = getimagesize($image->file);
                $sizeDetect[] = [
                    $key => [
                        'width' => $imageSize[0],
                        'height' => $imageSize[1]
                    ]
                ];
            }
        }

        $this->image = $file;
        $this->setSize($sizeDetect);
    }

    public function delete()
    {
        $this->deleteImages();
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function deleteImages()
    {
        $fileLocation = Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $this->image;
        $pathParts = pathinfo($fileLocation);
        foreach ($this->arrSize as $key => $size) {
            $item = $pathParts['filename'] . "-" . $size['width'] . "x" . $size['height'] . "." . $pathParts['extension'];
            $itemLocation = Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $item;
            if (file_exists($itemLocation)) {
                unlink($itemLocation);
            }
        }
        if (file_exists($fileLocation)) {
            unlink($fileLocation);
        };
    }

    public function getSize()
    {

        $originSizes = Json::decode($this->size);
        $prepareSize = [];
        if($originSizes) {
            foreach ($originSizes as $key => $sizes) {

                $prepareSize[array_keys($sizes)[0]] = array_values($sizes)[0];

            }
        }

        return $prepareSize;
    }

    public function setSize($arrSize)
    {
        $this->size = Json::encode($arrSize);
    }

    public static function findMediaByID($id)
    {
        return static::find()->where(['id' => $id])->all();
    }

    public function getAttachmentImage($size = null)
    {
        $imageSizes = $this->getSize();


        if (array_key_exists($size, $imageSizes)) {
            $imageSize = $imageSizes[$size];
            $image = '<img src="' . $this->getAttachmentUrl($size) . '" width="' . $imageSize['width'] . '" height="' . $imageSize['height'] . '">';
            return $image;
        }
        $imageSize = $imageSizes['full'];
        $image = '<img src="' . $this->getAttachmentUrl() . '" width="' . $imageSize['width'] . '" height="' . $imageSize['height'] . '">';
        return $image;

    }

    public function getAttachmentUrl($size = null)
    {
        $imageSizes = $this->getSize();
        if (array_key_exists($size, $imageSizes)) {
            $imageSize = $this->arrSize[$size];
            $fileLocation = Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $this->image;
            $imageParts = pathinfo($fileLocation);
            return Yii::$app->uploadUrl->baseUrl . '/' . $imageParts['filename'] . '-' . $imageSize['width'] . 'x' . $imageSize['height'] . '.' . $imageParts['extension'];
        }


        return str_replace(' ','%20',Yii::$app->uploadUrl->baseUrl . '/' . $this->image);
    }

    public static function uploadFile($attribute, $type = 'image', $rotate = null)
    {
        $attachment = new Attachment();
        $attachment->fileUpload = $attribute;
        if ($attachment->fileUpload && $type == 'image') {
            $fileName = $attachment->upload();
            if ($fileName) {
                $attachment->prepareFile($fileName, $rotate);
                $attachment->setCreatedDate();
                $attachment->setUpdatedDate();
                $attachment->save();
                return $attachment;
            }
        }
        return false;
    }

    public function rotateImage($degree = 0) {
        $fileLocation = Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $this->image;
        $pathParts = pathinfo($fileLocation);
        if (file_exists($fileLocation)) {
            $image = Yii::$app->image->load($fileLocation);
            $image->rotate($degree);
            $image->save();
        }
        if ($degree && $degree != 0 && ($degree % 360 != 0)) {
            foreach ($this->arrSize as $key => $size) {
                $item = $pathParts['filename'] . "-" . $size['width'] . "x" . $size['height'] . "." . $pathParts['extension'];
                $itemLocation = Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $item;
                if (file_exists($itemLocation)) {
                    $image = Yii::$app->image->load($itemLocation);
                    $image->rotate($degree);
                    $image->save();
                }
            }
           
        }
    }
    public function upload()
    {

        $uploads = Yii::$app->uploadDir;

        $fileName = $this->fileUpload->baseName . '.' . $this->fileUpload->extension;
        $cnt = 1;
        while (file_exists(Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $fileName)) {
            $fileName = $this->fileUpload->baseName . $cnt . '.' . $this->fileUpload->extension;
            $cnt++;
        }
        if ($this->fileUpload->saveAs($uploads . '/' . $fileName)) {
            chmod(Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $fileName, 0777);
            return $fileName;
        }

        return false;

    }

    /**
     * Function for delete not using image
     */
    public static function removeNotUseFile() {
        $allAttachments = Attachment::find()->all(); /* Get all attachment in database */
        $uploadPath = Yii::$app->uploadDir;
        $dh  = opendir($uploadPath);

        $existFile = [];
        while (false !== ($filename = readdir($dh))) {
            $existFile[] = $filename;
        }
        $fileUsing = [];
        $tmpAttachment = new CommonAttachment(); /* For get array file size */

        foreach ($allAttachments as $attachment) {
            $fileLocation = Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $attachment->image;
            $pathParts = pathinfo($fileLocation);
            $fileUsing[] = $attachment->image;
            foreach ($tmpAttachment->arrSize as $key => $size) {
                $item = $pathParts['filename'] . "-" . $size['width'] . "x" . $size['height'] . "." . $pathParts['extension'];
                $itemLocation = Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $item;
                if (file_exists($itemLocation)) {
                    $fileUsing[] = $item;
                }
            }

        }
        $deleteFile = [];
        foreach ($existFile as $key => $file) {
            if(!in_array($file,$fileUsing)) {
                $deleteFile[] = $file;
            }
        }
        foreach($deleteFile as $key => $file ) {
            if($file != '.' && $file != '..' && $file != '.gitignore') {
                $itemLocation = Yii::$app->uploadDir . DIRECTORY_SEPARATOR . $file;
                if (file_exists($itemLocation)) {

                     unlink($itemLocation);
                }
            }

        }
    }

}
